apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "cloudconnectors.fullname" . }}
  labels:
{{ include "cloudconnectors.labels" . | indent 4 }}
  {{- with .Values.sts.annotations }}
  annotations:
    {{ toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "cloudconnectors.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ .Values.sts.serviceName | default (include "cloudconnectors.fullname" .) }}
  podManagementPolicy: {{ .Values.sts.podManagementPolicy | default "OrderedReady" }}
  updateStrategy:
    {{- if .Values.sts.updateStrategy }}
    type: {{ .Values.sts.updateStrategy.type | default "RollingUpdate" }}
    {{- if and (eq (.Values.sts.updateStrategy.type | default "RollingUpdate") "RollingUpdate") .Values.sts.updateStrategy.rollingUpdate }}
    rollingUpdate:
      {{- with .Values.sts.updateStrategy.rollingUpdate }}
      partition: {{ .partition | default 0 }}
      maxUnavailable: {{ .maxUnavailable | default 1 }}
      {{- end }}
    {{- end }}
    {{- end }}
  revisionHistoryLimit: {{ .Values.sts.revisionHistoryLimit | default 10 }}
  minReadySeconds: {{ .Values.sts.minReadySeconds | default 0 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "cloudconnectors.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- with .Values.podLabels }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.sts.terminationGracePeriodSeconds | default 10 }}
      {{- with .Values.sts.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "cloudconnectors.serviceAccountName" . }}
      {{- with .Values.sts.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sts.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sts.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.sts.securityContext }}
      securityContext:
        {{- toYaml .Values.sts.securityContext | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
        {{- range .Values.extraArgs }}
          - {{ . }}
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        {{ if .Values.ports }}
        ports: {{ toYaml .Values.ports | nindent 10 }}
        {{- end }}
        {{- with .Values.env }}
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: STORAGE_DIRECTORY
            value: {{ include "cloudconnectors.storagePath" $ | quote }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.envFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.podSecurityContext }}
        securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 10 }}
        {{- end }}
        livenessProbe:
          {{- if .Values.livenessProbe.initialDelaySeconds | empty | not }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.livenessProbe.periodSeconds | empty | not }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.livenessProbe.timeoutSeconds | empty | not }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.livenessProbe.failureThreshold | empty | not }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe.terminationGracePeriodSeconds | empty | not }}
          terminationGracePeriodSeconds: {{ .Values.livenessProbe.terminationGracePeriodSeconds }}
          {{- end }}
          httpGet:
            path: {{ .Values.livenessProbe.httpGet.path }}
            port: {{ .Values.livenessProbe.httpGet.port }}
        readinessProbe:
          {{- if .Values.readinessProbe.initialDelaySeconds | empty | not }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.periodSeconds | empty | not }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.timeoutSeconds | empty | not }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.successThreshold | empty | not }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.failureThreshold | empty | not }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          httpGet:
            path: {{ .Values.readinessProbe.httpGet.path }}
            port: {{ .Values.readinessProbe.httpGet.port }}
        {{- if .Values.startupProbe }}
        startupProbe:
          {{- if .Values.startupProbe.initialDelaySeconds | empty | not }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          {{- end }}
          {{- if .Values.startupProbe.periodSeconds | empty | not }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.startupProbe.timeoutSeconds | empty | not }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.startupProbe.failureThreshold | empty | not }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.terminationGracePeriodSeconds | empty | not }}
          terminationGracePeriodSeconds: {{ .Values.startupProbe.terminationGracePeriodSeconds }}
          {{- end }}
          httpGet:
            path: {{ .Values.startupProbe.httpGet.path }}
            port: {{ .Values.startupProbe.httpGet.port }}
        {{- end }}
        volumeMounts:
          - name: {{ include "cloudconnectors.fullname" . }}-persistent-storage
            mountPath: {{ include "cloudconnectors.storagePath" . }}
          {{- if .Values.awsConfig.enabled }}
          - name: aws-config
            mountPath: /cloudconnectors/.aws
            readOnly: true
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- tpl (toYaml .Values.extraVolumeMounts) . | nindent 10 }}
          {{- end }}
      volumes:
      {{- if .Values.awsConfig.enabled }}
        - name: aws-config
          {{- if .Values.awsConfig.useSecret }}
          secret:
            secretName: {{ .Values.awsConfig.secretName }}
            optional: true
          {{- else }}
          hostPath:
            path: {{ .Values.awsConfig.hostPath }}
            type: Directory
          {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- tpl (toYaml .Values.extraVolumes) . | nindent 8 }}
        {{- end }}
      initContainers:
        - name: init-chmod
          image: busybox:stable
          command: ['sh', '-c']
          args:
            - |
              # Always chmod storage directory
              chmod -R 777 {{ include "cloudconnectors.storagePath" . }}
              {{- if and .Values.awsConfig.enabled .Values.awsConfig.hostPath }}
              # AWS config permissions if enabled and hostPath is used
              if [ -d "/cloudconnectors/.aws" ]; then
                mkdir -p /cloudconnectors/.aws/sso/cache
                chmod 755 /cloudconnectors/.aws/sso
                chmod 755 /cloudconnectors/.aws/sso/cache
                # Make regular AWS config files readable
                find /cloudconnectors/.aws -type f -not -path "*/sso/cache/*" -exec chmod 644 {} \;
                # Make SSO cache files readable
                find /cloudconnectors/.aws/sso/cache -type f -name "*.json" -exec chmod 644 {} \;
              fi
              {{- end }}
          volumeMounts:
            - name: {{ include "cloudconnectors.fullname" . }}-persistent-storage
              mountPath: {{ include "cloudconnectors.storagePath" . }}
            {{- if .Values.awsConfig.enabled }}
            - name: aws-config
              mountPath: /cloudconnectors/.aws
            {{- end }}
        {{- if .Values.initContainers }}
        {{- range .Values.initContainers }}
        - {{ toYaml . | nindent 10 }}
        {{- end }}
        {{- end }}
      {{- if .Values.extraContainers }}
      {{- tpl (toYaml .Values.extraContainers) . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "cloudconnectors.fullname" . }}-persistent-storage
      spec:
        accessModes: {{ .Values.storage.accessModes }}
        resources:
          requests:
            storage: {{ .Values.storage.size }}
        storageClassName: {{ .Values.storage.storageClassName }}
    {{- with .Values.sts.volumeClaimTemplates }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- if .Values.sts.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: {{ .Values.sts.persistentVolumeClaimRetentionPolicy.whenDeleted }}
    whenScaled: {{ .Values.sts.persistentVolumeClaimRetentionPolicy.whenScaled }}
  {{- end }}
  {{- if .Values.sts.ordinals }}
  ordinals:
    start: {{ .Values.sts.ordinals.start }}
  {{- end }}
